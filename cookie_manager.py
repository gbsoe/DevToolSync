
import os
import time
import logging
import requests
import random
import string
import json
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
COOKIE_FILE = 'cookies.txt'

# Common YouTube unique IDs - these are used in many cookies
def generate_visitor_id():
    """Generate a random VISITOR_INFO1_LIVE value"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=11))

def generate_session_token():
    """Generate a random session token for YSC cookie"""
    return ''.join(random.choices(string.ascii_letters, k=11))

def get_youtube_cookies_with_user_agent():
    """Make a request to YouTube with various User-Agents to gather valid cookies"""
    # List of common modern user agents to rotate through
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Safari/605.1.15',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
        'Mozilla/5.0 (iPad; CPU OS 17_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1',
    ]
    
    all_cookies = {}
    youtube_urls = [
        'https://www.youtube.com/',
        'https://www.youtube.com/feed/explore',
        'https://www.youtube.com/feed/trending',
        'https://www.youtube.com/feed/subscriptions',
        'https://www.youtube.com/results?search_query=music'
    ]
    
    # Try different user agents to get a variety of cookies
    for user_agent in user_agents:
        try:
            session = requests.Session()
            headers = {
                'User-Agent': user_agent,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'DNT': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Sec-Fetch-User': '?1',
                # Add additional headers to look more like a real browser
                'Cache-Control': 'max-age=0',
                'TE': 'Trailers',
            }
            
            # Visit multiple YouTube pages to gather more cookies
            for i, url in enumerate(youtube_urls):
                logger.info(f"Fetching {url} with User-Agent: {user_agent[:20]}...")
                
                # Add referrer for subsequent requests to appear more natural
                if i > 0:
                    headers['Referer'] = youtube_urls[i-1]
                
                response = session.get(url, headers=headers, timeout=10)
                
                if response.status_code == 200:
                    # Add cookies from this request to our collection
                    for cookie in session.cookies:
                        if cookie.name not in all_cookies:
                            all_cookies[cookie.name] = cookie
                    logger.info(f"Got {len(session.cookies)} cookies from YouTube request to {url}")
                    
                    # Briefly sleep between requests to avoid triggering rate limits
                    if i < len(youtube_urls) - 1:
                        time.sleep(0.5)
        except Exception as e:
            logger.warning(f"Error getting cookies with user agent {user_agent[:20]}: {e}")
    
    logger.info(f"Collected {len(all_cookies)} unique cookies from YouTube")
    return all_cookies

def create_netscape_cookies_file():
    """Create a Netscape format cookies file with enhanced YouTube cookies"""
    logger.info("Creating enhanced Netscape format cookies file for YouTube")
    
    # Create header that identifies file as Netscape format
    lines = ["# Netscape HTTP Cookie File"]
    lines.append("# https://curl.haxx.se/rfc/cookie_spec.html")
    lines.append("# This file was generated by YouTube Downloader. Do not edit.")
    lines.append("")
    
    # Long expiry - 1 year
    one_year = datetime.now() + timedelta(days=365)
    expires = str(int(one_year.timestamp()))
    
    # First try to get real cookies by making requests to YouTube
    collected_cookies = get_youtube_cookies_with_user_agent()
    
    # If we couldn't get real cookies, use these fallback values
    if not collected_cookies:
        logger.warning("Could not get real cookies, using fallback values")
        
    # Essential YouTube cookies in Netscape format
    # Format: domain flag path secure expiry name value
    essential_cookies = {
        'CONSENT': collected_cookies.get('CONSENT', 'YES+cb.20240425-01-p0.en+FX+062'),
        'VISITOR_INFO1_LIVE': collected_cookies.get('VISITOR_INFO1_LIVE', generate_visitor_id()),
        'YSC': collected_cookies.get('YSC', generate_session_token()),
        'PREF': collected_cookies.get('PREF', 'f4=4000000&f5=30000&f6=1600&hl=en'),
        'GPS': collected_cookies.get('GPS', '1'),
        '__Secure-YEC': collected_cookies.get('__Secure-YEC', generate_visitor_id()),
    }
    
    # Add each essential cookie to the file
    for name, value in essential_cookies.items():
        # Check if value is a cookie object by checking for required attributes
        if hasattr(value, 'domain') and hasattr(value, 'path') and hasattr(value, 'secure') and hasattr(value, 'name') and hasattr(value, 'value'):
            # Use the cookie object directly
            domain = f".{value.domain}" if not value.domain.startswith('.') else value.domain
            line = f"{domain}\tTRUE\t{value.path}\t{'TRUE' if value.secure else 'FALSE'}\t{expires}\t{value.name}\t{value.value}"
        else:
            # Use our formatted values
            domain = ".youtube.com"
            secure = "TRUE" if name.startswith("__Secure-") else "FALSE"
            line = f"{domain}\tTRUE\t/\t{secure}\t{expires}\t{name}\t{value}"
        lines.append(line)
    
    # Add all other collected cookies
    for name, cookie in collected_cookies.items():
        # Skip essential cookies that we've already added
        if name in essential_cookies:
            continue
        
        # Check if this is a proper cookie object with required attributes
        if hasattr(cookie, 'domain') and hasattr(cookie, 'path') and hasattr(cookie, 'secure') and hasattr(cookie, 'name') and hasattr(cookie, 'value'):
            domain = f".{cookie.domain}" if not cookie.domain.startswith('.') else cookie.domain
            line = f"{domain}\tTRUE\t{cookie.path}\t{'TRUE' if cookie.secure else 'FALSE'}\t{expires}\t{cookie.name}\t{cookie.value}"
            lines.append(line)
    
    # Write file
    content = "\n".join(lines)
    with open(COOKIE_FILE, 'w') as f:
        f.write(content)
    
    logger.info(f"Created cookies file with {len(lines) - 4} cookies")
    return True

def refresh_cookies():
    """Create an improved YouTube cookies file"""
    try:
        return create_netscape_cookies_file()
    except Exception as e:
        logger.error(f"Error creating cookies: {str(e)}")
        # If everything fails, create a basic cookies file
        try:
            with open(COOKIE_FILE, 'w') as f:
                f.write("# Netscape HTTP Cookie File\n")
                f.write("# https://curl.haxx.se/rfc/cookie_spec.html\n")
                f.write("# This file was generated as a fallback. Do not edit.\n\n")
                f.write(".youtube.com\tTRUE\t/\tFALSE\t" + 
                        str(int(time.time() + 3600 * 24 * 365)) + "\tCONSENT\tYES+cb.20240425-01-p0.en+FX+062\n")
            return True
        except:
            logger.error("Failed to create even basic cookies file")
            return False

def ensure_fresh_cookies():
    """Ensure cookies exist and are fresh (< 30 minutes old)"""
    try:
        # Check if cookie file exists and is less than 30 minutes old (reduced from 2 hours)
        # This helps avoid YouTube's bot detection by refreshing cookies more frequently
        if not os.path.exists(COOKIE_FILE) or \
           os.path.getmtime(COOKIE_FILE) < (time.time() - 1800):
            logger.info("Creating or refreshing cookie file")
            return refresh_cookies()
        logger.info("Using existing cookie file")
        return True
    except Exception as e:
        logger.error(f"Error checking cookies: {str(e)}")
        # If there's any error, try to refresh cookies anyway
        try:
            logger.info("Attempting to refresh cookies due to previous error")
            return refresh_cookies()
        except:
            logger.error("Failed to refresh cookies after error")
            return False
